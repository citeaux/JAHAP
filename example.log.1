2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32863'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32872'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32878'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32883'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32890'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32896'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32903'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32908'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32915'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32934'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '32940'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '122880'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '122885'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tgname, tgfoid::pg_catalog.regproc AS tgfname, pg_catalog.pg_get_triggerdef(oid, false) AS tgdef, tgenabled, tableoid, oid FROM pg_catalog.pg_trigger t WHERE tgrelid = '122893'::pg_catalog.oid AND NOT tgisinternal
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, rulename, ev_class AS ruletable, ev_type, is_instead, ev_enabled FROM pg_rewrite ORDER BY oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: with recursive w as ( select d1.objid, d2.refobjid, c2.relkind as refrelkind from pg_depend d1 join pg_class c1 on c1.oid = d1.objid and c1.relkind = 'm' join pg_rewrite r1 on r1.ev_class = d1.objid join pg_depend d2 on d2.classid = 'pg_rewrite'::regclass and d2.objid = r1.oid and d2.refobjid <> d1.objid join pg_class c2 on c2.oid = d2.refobjid and c2.relkind in ('m','v') where d1.classid = 'pg_class'::regclass union select w.objid, d3.refobjid, c3.relkind from w join pg_rewrite r3 on r3.ev_class = w.refobjid join pg_depend d3 on d3.classid = 'pg_rewrite'::regclass and d3.objid = r3.oid and d3.refobjid <> w.refobjid join pg_class c3 on c3.oid = d3.refobjid and c3.relkind in ('m','v') ) select 'pg_class'::regclass::oid as classid, objid, refobjid from w where refrelkind = 'm'
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lomowner) AS rolname, lomacl FROM pg_largeobject_metadata
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid, deptype FROM pg_depend WHERE deptype != 'p' AND deptype != 'e' ORDER BY 1,2
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = datdba) AS dba, pg_encoding_to_char(encoding) AS encoding, datcollate, datctype, datfrozenxid, datminmxid, (SELECT spcname FROM pg_tablespace t WHERE t.oid = dattablespace) AS tablespace, shobj_description(oid, 'pg_database') AS description FROM pg_database WHERE datname = 'JAHAPs'
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_database'::pg_catalog.regclass AND objoid = 32768
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT description, classoid, objoid, objsubid FROM pg_catalog.pg_description ORDER BY classoid, objoid, objsubid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT label, provider, classoid, objoid, objsubid FROM pg_catalog.pg_seclabel ORDER BY classoid, objoid, objsubid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT proretset, prosrc, probin, pg_catalog.pg_get_function_arguments(oid) AS funcargs, pg_catalog.pg_get_function_identity_arguments(oid) AS funciargs, pg_catalog.pg_get_function_result(oid) AS funcresult, proiswindow, provolatile, proisstrict, prosecdef, proleakproof, proconfig, procost, prorows, (SELECT lanname FROM pg_catalog.pg_language WHERE oid = prolang) AS lanname FROM pg_catalog.pg_proc WHERE oid = '81930'::pg_catalog.oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '73736' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32788' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32781' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32797' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32806' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32815' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '57349' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32820' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32825' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32830' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32837' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '122893' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '122885' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '122880' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT pg_catalog.pg_get_viewdef('131072'::pg_catalog.oid) AS viewdef
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '131072' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32845' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '65536' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '57354' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32853' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '57344' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32858' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '73741' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '57359' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32863' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32872' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32878' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32883' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32890' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '33051' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32896' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32915' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT pg_catalog.pg_get_viewdef('90112'::pg_catalog.oid) AS viewdef
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '90112' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32903' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32908' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32769' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32929' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32924' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32934' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT attname, attacl FROM pg_catalog.pg_attribute WHERE attrelid = '32940' AND NOT attisdropped AND attacl IS NOT NULL ORDER BY attnum
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT pg_catalog.pg_get_ruledef('65539'::pg_catalog.oid) AS definition
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT pg_catalog.pg_get_ruledef('73739'::pg_catalog.oid) AS definition
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.account_position (id, bill, vat, payment, billed, amount, price, debit, rate, canceledposition, canceled, ratedate, account, positionname) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.accounts (id, balance, checkout, cscservice, address, reservation, checkindate, checkoutdate) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.address (id, christianname, city, email, name, phone, street, zipcode, country, currency, language, homepage, remarks, greeting, salutation, title, addresstype) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.bill (id, billno, address, billdate, billname, canceled, canceledbill, total, billnostring, uuid, billchange, temp_bill) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.bill_no (billno) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.cat (id, cat_name, cat_description) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.choice (id, groupid, groupcode, groupname, choicecode, choicetext, choiceint, choicefloat, language) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.country (id, country_code, country_name, language, currency) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.csc (id, rate, fromdate, todate, account, amount, price, service) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.currency (id, currency_code, currency_name, currency_symbol) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.hotel (id, hotel_code, hotel_name, hotel_adress, hotel_bankaccountdata1, hotel_bankaccountdata2, hotel_language, hotel_country, hotel_currency, hotel_footertext, operationdate) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.housekeepingblock (id, name, comment) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.job_jobscheduler (id_job, id_jobscheduler, id, "position") TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.jobs (id, type, name, definition) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.jobscheduler (id, typ, name) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.language (id, language_code, language_name) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.location (id, building, floor, address_id) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.log_accounting (id, amount, date, "time", account, account_position, positionname) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.maintenance (id, blocks, cat_name, code, floor, no_maintenance) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.maintenanceblock (id, name, comment) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.occ (id, arrivaltime, departuretime, arrivaldate, guest, departuredate, room, res, account, maintenance, housekeeping) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.payed (id, debit, paymenttype, openpos, total, canceled, canceledpayment) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.paymenttypes (id, name, receivable) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.rates (id, name, price, code, revaccount, overnight, vattype, net) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.receivables (id, debit, paymenttype) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.reports (id, name, description, report_group, report, report_layout, language) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.res (id, arrivaltime, arrivaldate, departuretime, resno, addressid, departuredate) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.revaccounts (id, revaccountnumber, name, rev_group) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.revenue (id, amount, debit, accountposition, revaccount, revdate) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.rooms (id, category, code, name, cat, location, clean, no_maintenance) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.schema_version (version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.seq_store (table_name, value) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.sequence (seq_name, seq_count) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.vat (id, debit, date, vattype, accountposition, amount) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = public, pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: COPY public.vattype (id, name, datevat, percentage) TO stdout;
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET DATESTYLE = ISO
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET INTERVALSTYLE = POSTGRES
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET extra_float_digits TO 3
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET synchronize_seqscans TO off
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET statement_timeout = 0
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET lock_timeout = 0
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: BEGIN
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ ONLY
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, nspname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = nspowner) AS rolname, nspacl FROM pg_namespace
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT c.tableoid, c.oid, c.relname, c.relacl, c.relkind, c.relnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = c.relowner) AS rolname, c.relchecks, c.relhastriggers, c.relhasindex, c.relhasrules, c.relhasoids, c.relfrozenxid, c.relminmxid, tc.oid AS toid, tc.relfrozenxid AS tfrozenxid, tc.relminmxid AS tminmxid, c.relpersistence, c.relispopulated, c.relpages, CASE WHEN c.reloftype <> 0 THEN c.reloftype::pg_catalog.regtype ELSE NULL END AS reloftype, d.refobjid AS owning_tab, d.refobjsubid AS owning_col, (SELECT spcname FROM pg_tablespace t WHERE t.oid = c.reltablespace) AS reltablespace, array_to_string(c.reloptions, ', ') AS reloptions, array_to_string(array(SELECT 'toast.' || x FROM unnest(tc.reloptions) x), ', ') AS toast_reloptions FROM pg_class c LEFT JOIN pg_depend d ON (c.relkind = 'S' AND d.classid = c.tableoid AND d.objid = c.oid AND d.objsubid = 0 AND d.refclassid = c.tableoid AND d.deptype = 'a') LEFT JOIN pg_class tc ON (c.reltoastrelid = tc.oid) WHERE c.relkind in ('r', 'S', 'v', 'c', 'm', 'f') ORDER BY c.oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition FROM pg_extension x JOIN pg_namespace n ON n.oid = x.extnamespace
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, proname, prolang, pronargs, proargtypes, prorettype, proacl, pronamespace, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname FROM pg_proc p WHERE NOT proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 2.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 4.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 4.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) -     ') AS fdwoptions FROM pg_foreign_data_wrapper
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, srvname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = srvowner) AS rolname, srvfdw, srvtype, srvversion, srvacl,array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(srvoptions) ORDER BY option_name), E',
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 2.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 3.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 2.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 7.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 2.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 7.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 1.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) -   AND NOT EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_proc'::regclass AND objid = p.oid AND deptype = 'i'))
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, typname, typnamespace, typacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = typowner) AS rolname, typinput::oid AS typinput, typoutput::oid AS typoutput, typelem, typrelid, CASE WHEN typrelid = 0 THEN ' '::"char" ELSE (SELECT relkind FROM pg_class WHERE oid = typrelid) END AS typrelkind, typtype, typisdefined, typname[0] = '_' AND typelem != 0 AND (SELECT typarray FROM pg_type te WHERE oid = pg_type.typelem) = oid AS isarray FROM pg_type
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, lanname, lanpltrusted, lanplcallfoid, laninline, lanvalidator,  lanacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lanowner) AS lanowner FROM pg_language WHERE lanispl ORDER BY oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, proname AS aggname, pronamespace AS aggnamespace, pronargs, proargtypes, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname, proacl AS aggacl FROM pg_proc p WHERE proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog'))
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, oprname, oprnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = oprowner) AS rolname, oprkind, oprcode::oid AS oprcode FROM pg_operator
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, opcname, opcnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opcowner) AS rolname FROM pg_opclass
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, opfname, opfnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opfowner) AS rolname FROM pg_opfamily
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, prsname, prsnamespace, prsstart::oid, prstoken::oid, prsend::oid, prsheadline::oid, prslextype::oid FROM pg_ts_parser
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, tmplname, tmplnamespace, tmplinit::oid, tmpllexize::oid FROM pg_ts_template
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, dictname, dictnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = dictowner) AS rolname, dicttemplate, dictinitoption FROM pg_ts_dict
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, cfgname, cfgnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = cfgowner) AS rolname, cfgparser FROM pg_ts_config
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, fdwname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = fdwowner) AS rolname, fdwhandler::pg_catalog.regproc, fdwvalidator::pg_catalog.regproc, fdwacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(fdwoptions) ORDER BY option_name), E',
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 2.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  duration: 0.000 ms
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) -     ') AS srvoptions FROM pg_foreign_server
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT oid, tableoid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = defaclrole) AS defaclrole, defaclnamespace, defaclobjtype, defaclacl FROM pg_default_acl
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, collname, collnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = collowner) AS rolname FROM pg_collation
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, conname, connamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = conowner) AS rolname FROM pg_conversion
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, castsource, casttarget, castfunc, castcontext, castmethod FROM pg_cast ORDER BY 3,4
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT inhrelid, inhparent FROM pg_inherits
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT e.tableoid, e.oid, evtname, evtenabled, evtevent, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = evtowner) AS evtowner, array_to_string(array(select quote_literal(x)  from unnest(evttags) as t(x)), ', ') as evttags, e.evtfoid::regproc as evtfname FROM pg_event_trigger e ORDER BY e.oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid FROM pg_depend WHERE refclassid = 'pg_extension'::regclass AND deptype = 'e' ORDER BY 3,4
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, rulename, ev_class AS ruletable, ev_type, is_instead, ev_enabled FROM pg_rewrite ORDER BY oid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: with recursive w as ( select d1.objid, d2.refobjid, c2.relkind as refrelkind from pg_depend d1 join pg_class c1 on c1.oid = d1.objid and c1.relkind = 'm' join pg_rewrite r1 on r1.ev_class = d1.objid join pg_depend d2 on d2.classid = 'pg_rewrite'::regclass and d2.objid = r1.oid and d2.refobjid <> d1.objid join pg_class c2 on c2.oid = d2.refobjid and c2.relkind in ('m','v') where d1.classid = 'pg_class'::regclass union select w.objid, d3.refobjid, c3.relkind from w join pg_rewrite r3 on r3.ev_class = w.refobjid join pg_depend d3 on d3.classid = 'pg_rewrite'::regclass and d3.objid = r3.oid and d3.refobjid <> w.refobjid join pg_class c3 on c3.oid = d3.refobjid and c3.relkind in ('m','v') ) select 'pg_class'::regclass::oid as classid, objid, refobjid from w where refrelkind = 'm'
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lomowner) AS rolname, lomacl FROM pg_largeobject_metadata
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid, deptype FROM pg_depend WHERE deptype != 'p' AND deptype != 'e' ORDER BY 1,2
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SET search_path = pg_catalog
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT tableoid, oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = datdba) AS dba, pg_encoding_to_char(encoding) AS encoding, datcollate, datctype, datfrozenxid, datminmxid, (SELECT spcname FROM pg_tablespace t WHERE t.oid = dattablespace) AS tablespace, shobj_description(oid, 'pg_database') AS description FROM pg_database WHERE datname = 'template1'
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_database'::pg_catalog.regclass AND objoid = 1
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT description, classoid, objoid, objsubid FROM pg_catalog.pg_description ORDER BY classoid, objoid, objsubid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - pg_dump: LOG:  statement: SELECT label, provider, classoid, objoid, objsubid FROM pg_catalog.pg_seclabel ORDER BY classoid, objoid, objsubid
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:64) - 
2015-02-13 TRACE [JavaFX Application Thread] (ExecuteShellCommand.java:68) - Exit VAlue 0
2015-02-13 DEBUG [JavaFX Application Thread] (ExecuteShellCommand.java:74) - Function exit ExecuteShellCommand
2015-02-13 DEBUG [JavaFX Application Thread] (BackupJob.java:50) - Function exit BackupJob LOG:  statement: SET search_path = pg_catalog
LOG:  statement: SELECT oid, rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolconnlimit, rolpassword, rolvaliduntil, rolreplication, pg_catalog.shobj_description(oid, 'pg_authid') as rolcomment, rolname = current_user AS is_current_user FROM pg_authid ORDER BY 2
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 24578
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 16394
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 10
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 24577
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 139264
LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_authid'::pg_catalog.regclass AND objoid = 16398
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'JAHAP')
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'address')
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'postgres')
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'root')
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'russ')
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setdatabase = 0 AND setrole = (SELECT oid FROM pg_authid WHERE rolname = 'sr')
LOG:  statement: SELECT ur.rolname AS roleid, um.rolname AS member, a.admin_option, ug.rolname AS grantor FROM pg_auth_members a LEFT JOIN pg_authid ur on ur.oid = a.roleid LEFT JOIN pg_authid um on um.oid = a.member LEFT JOIN pg_authid ug on ug.oid = a.grantor ORDER BY 1,2,3
LOG:  statement: SELECT oid, spcname, pg_catalog.pg_get_userbyid(spcowner) AS spcowner, pg_catalog.pg_tablespace_location(oid), spcacl, array_to_string(spcoptions, ', '),pg_catalog.shobj_description(oid, 'pg_tablespace') FROM pg_catalog.pg_tablespace WHERE spcname !~ '^pg_' ORDER BY 1
LOG:  statement: SELECT pg_encoding_to_char(encoding), datcollate, datctype FROM pg_database WHERE datname = 'template0'
LOG:  statement: SELECT datname, coalesce(rolname, (select rolname from pg_authid where oid=(select datdba from pg_database where datname='template0'))), pg_encoding_to_char(d.encoding), datcollate, datctype, datfrozenxid, datminmxid, datistemplate, datacl, datconnlimit, (SELECT spcname FROM pg_tablespace t WHERE t.oid = d.dattablespace) AS dattablespace FROM pg_database d LEFT JOIN pg_authid u ON (datdba = u.oid) WHERE datallowconn ORDER BY 1
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setrole = 0 AND setdatabase = (SELECT oid FROM pg_database WHERE datname = 'BPTEST');
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setrole = 0 AND setdatabase = (SELECT oid FROM pg_database WHERE datname = 'JAHAPs');
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setrole = 0 AND setdatabase = (SELECT oid FROM pg_database WHERE datname = 'postgres');
LOG:  statement: SELECT setconfig[1] FROM pg_db_role_setting WHERE setrole = 0 AND setdatabase = (SELECT oid FROM pg_database WHERE datname = 'template1');
LOG:  statement: SELECT rolname, datname, unnest(setconfig) FROM pg_db_role_setting, pg_authid, pg_database WHERE setrole = pg_authid.oid AND setdatabase = pg_database.oid
LOG:  statement: SELECT datname FROM pg_database WHERE datallowconn ORDER BY 1
pg_dump: LOG:  statement: SET DATESTYLE = ISO
pg_dump: LOG:  statement: SET INTERVALSTYLE = POSTGRES
pg_dump: LOG:  statement: SET extra_float_digits TO 3
pg_dump: LOG:  statement: SET synchronize_seqscans TO off
pg_dump: LOG:  statement: SET statement_timeout = 0
pg_dump: LOG:  statement: SET lock_timeout = 0
pg_dump: LOG:  statement: BEGIN
pg_dump: LOG:  statement: SET TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ ONLY
pg_dump: LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, nspname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = nspowner) AS rolname, nspacl FROM pg_namespace
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT c.tableoid, c.oid, c.relname, c.relacl, c.relkind, c.relnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = c.relowner) AS rolname, c.relchecks, c.relhastriggers, c.relhasindex, c.relhasrules, c.relhasoids, c.relfrozenxid, c.relminmxid, tc.oid AS toid, tc.relfrozenxid AS tfrozenxid, tc.relminmxid AS tminmxid, c.relpersistence, c.relispopulated, c.relpages, CASE WHEN c.reloftype <> 0 THEN c.reloftype::pg_catalog.regtype ELSE NULL END AS reloftype, d.refobjid AS owning_tab, d.refobjsubid AS owning_col, (SELECT spcname FROM pg_tablespace t WHERE t.oid = c.reltablespace) AS reltablespace, array_to_string(c.reloptions, ', ') AS reloptions, array_to_string(array(SELECT 'toast.' || x FROM unnest(tc.reloptions) x), ', ') AS toast_reloptions FROM pg_class c LEFT JOIN pg_depend d ON (c.relkind = 'S' AND d.classid = c.tableoid AND d.objid = c.oid AND d.objsubid = 0 AND d.refclassid = c.tableoid AND d.deptype = 'a') LEFT JOIN pg_class tc ON (c.reltoastrelid = tc.oid) WHERE c.relkind in ('r', 'S', 'v', 'c', 'm', 'f') ORDER BY c.oid
pg_dump: LOG:  statement: LOCK TABLE public.address IN ACCESS SHARE MODE
pg_dump: LOG:  statement: LOCK TABLE public.payroll IN ACCESS SHARE MODE
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition FROM pg_extension x JOIN pg_namespace n ON n.oid = x.extnamespace
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, proname, prolang, pronargs, proargtypes, prorettype, proacl, pronamespace, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname FROM pg_proc p WHERE NOT proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS fdwoptions FROM pg_foreign_data_wrapper
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, srvname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = srvowner) AS rolname, srvfdw, srvtype, srvversion, srvacl,array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(srvoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 3.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '16395'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 6.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 7.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 6.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
  AND NOT EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_proc'::regclass AND objid = p.oid AND deptype = 'i'))
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, typname, typnamespace, typacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = typowner) AS rolname, typinput::oid AS typinput, typoutput::oid AS typoutput, typelem, typrelid, CASE WHEN typrelid = 0 THEN ' '::"char" ELSE (SELECT relkind FROM pg_class WHERE oid = typrelid) END AS typrelkind, typtype, typisdefined, typname[0] = '_' AND typelem != 0 AND (SELECT typarray FROM pg_type te WHERE oid = pg_type.typelem) = oid AS isarray FROM pg_type
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, lanname, lanpltrusted, lanplcallfoid, laninline, lanvalidator,  lanacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lanowner) AS lanowner FROM pg_language WHERE lanispl ORDER BY oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, proname AS aggname, pronamespace AS aggnamespace, pronargs, proargtypes, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname, proacl AS aggacl FROM pg_proc p WHERE proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog'))
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, oprname, oprnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = oprowner) AS rolname, oprkind, oprcode::oid AS oprcode FROM pg_operator
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, opcname, opcnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opcowner) AS rolname FROM pg_opclass
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, opfname, opfnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opfowner) AS rolname FROM pg_opfamily
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, prsname, prsnamespace, prsstart::oid, prstoken::oid, prsend::oid, prsheadline::oid, prslextype::oid FROM pg_ts_parser
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, tmplname, tmplnamespace, tmplinit::oid, tmpllexize::oid FROM pg_ts_template
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, dictname, dictnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = dictowner) AS rolname, dicttemplate, dictinitoption FROM pg_ts_dict
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, cfgname, cfgnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = cfgowner) AS rolname, cfgparser FROM pg_ts_config
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, fdwname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = fdwowner) AS rolname, fdwhandler::pg_catalog.regproc, fdwvalidator::pg_catalog.regproc, fdwacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(fdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS srvoptions FROM pg_foreign_server
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT oid, tableoid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = defaclrole) AS defaclrole, defaclnamespace, defaclobjtype, defaclacl FROM pg_default_acl
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, collname, collnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = collowner) AS rolname FROM pg_collation
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, conname, connamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = conowner) AS rolname FROM pg_conversion
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, castsource, casttarget, castfunc, castcontext, castmethod FROM pg_cast ORDER BY 3,4
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT inhrelid, inhparent FROM pg_inherits
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT e.tableoid, e.oid, evtname, evtenabled, evtevent, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = evtowner) AS evtowner, array_to_string(array(select quote_literal(x)  from unnest(evttags) as t(x)), ', ') as evttags, e.evtfoid::regproc as evtfname FROM pg_event_trigger e ORDER BY e.oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid FROM pg_depend WHERE refclassid = 'pg_extension'::regclass AND deptype = 'e' ORDER BY 3,4
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32781'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32797'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32815'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32825'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32837'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32853'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32863'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32878'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32890'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32903'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32915'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32929'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '32940'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '57344'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '57354'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '65536'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '73741'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '122880'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS attfdwoptions FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_type t ON a.atttypid = t.oid WHERE a.attrelid = '122893'::pg_catalog.oid AND a.attnum > 0::pg_catalog.int2 ORDER BY a.attrelid, a.attnum
pg_dump: LOG:  statement: SET search_path = public, pg_catalog
pg_dump: LOG:  statement: SELECT a.attnum, a.attname, a.atttypmod, a.attstattarget, a.attstorage, t.typstorage, a.attnotnull, a.atthasdef, a.attisdropped, a.attlen, a.attalign, a.attislocal, pg_catalog.format_type(t.oid,a.atttypmod) AS atttypname, array_to_string(a.attoptions, ', ') AS attoptions, CASE WHEN a.attcollation <> t.typcollation THEN a.attcollation ELSE 0 END AS attcollation, pg_catalog.array_to_string(ARRAY(SELECT pg_catalog.quote_ident(option_name) || ' ' || pg_catalog.quote_literal(option_value) FROM pg_catalog.pg_options_to_table(attfdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 7.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 6.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
  AND NOT EXISTS (SELECT 1 FROM pg_depend WHERE classid = 'pg_proc'::regclass AND objid = p.oid AND deptype = 'i'))
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, typname, typnamespace, typacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = typowner) AS rolname, typinput::oid AS typinput, typoutput::oid AS typoutput, typelem, typrelid, CASE WHEN typrelid = 0 THEN ' '::"char" ELSE (SELECT relkind FROM pg_class WHERE oid = typrelid) END AS typrelkind, typtype, typisdefined, typname[0] = '_' AND typelem != 0 AND (SELECT typarray FROM pg_type te WHERE oid = pg_type.typelem) = oid AS isarray FROM pg_type
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, lanname, lanpltrusted, lanplcallfoid, laninline, lanvalidator,  lanacl, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lanowner) AS lanowner FROM pg_language WHERE lanispl ORDER BY oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, proname AS aggname, pronamespace AS aggnamespace, pronargs, proargtypes, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname, proacl AS aggacl FROM pg_proc p WHERE proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog'))
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, oprname, oprnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = oprowner) AS rolname, oprkind, oprcode::oid AS oprcode FROM pg_operator
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, opcname, opcnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opcowner) AS rolname FROM pg_opclass
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, opfname, opfnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = opfowner) AS rolname FROM pg_opfamily
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, prsname, prsnamespace, prsstart::oid, prstoken::oid, prsend::oid, prsheadline::oid, prslextype::oid FROM pg_ts_parser
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, tmplname, tmplnamespace, tmplinit::oid, tmpllexize::oid FROM pg_ts_template
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, dictname, dictnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = dictowner) AS rolname, dicttemplate, dictinitoption FROM pg_ts_dict
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, cfgname, cfgnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = cfgowner) AS rolname, cfgparser FROM pg_ts_config
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, fdwname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = fdwowner) AS rolname, fdwhandler::pg_catalog.regproc, fdwvalidator::pg_catalog.regproc, fdwacl, array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(fdwoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS srvoptions FROM pg_foreign_server
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT oid, tableoid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = defaclrole) AS defaclrole, defaclnamespace, defaclobjtype, defaclacl FROM pg_default_acl
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, collname, collnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = collowner) AS rolname FROM pg_collation
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, conname, connamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = conowner) AS rolname FROM pg_conversion
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, castsource, casttarget, castfunc, castcontext, castmethod FROM pg_cast ORDER BY 3,4
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT inhrelid, inhparent FROM pg_inherits
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT e.tableoid, e.oid, evtname, evtenabled, evtevent, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = evtowner) AS evtowner, array_to_string(array(select quote_literal(x)  from unnest(evttags) as t(x)), ', ') as evttags, e.evtfoid::regproc as evtfname FROM pg_event_trigger e ORDER BY e.oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid FROM pg_depend WHERE refclassid = 'pg_extension'::regclass AND deptype = 'e' ORDER BY 3,4
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, rulename, ev_class AS ruletable, ev_type, is_instead, ev_enabled FROM pg_rewrite ORDER BY oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: with recursive w as ( select d1.objid, d2.refobjid, c2.relkind as refrelkind from pg_depend d1 join pg_class c1 on c1.oid = d1.objid and c1.relkind = 'm' join pg_rewrite r1 on r1.ev_class = d1.objid join pg_depend d2 on d2.classid = 'pg_rewrite'::regclass and d2.objid = r1.oid and d2.refobjid <> d1.objid join pg_class c2 on c2.oid = d2.refobjid and c2.relkind in ('m','v') where d1.classid = 'pg_class'::regclass union select w.objid, d3.refobjid, c3.relkind from w join pg_rewrite r3 on r3.ev_class = w.refobjid join pg_depend d3 on d3.classid = 'pg_rewrite'::regclass and d3.objid = r3.oid and d3.refobjid <> w.refobjid join pg_class c3 on c3.oid = d3.refobjid and c3.relkind in ('m','v') ) select 'pg_class'::regclass::oid as classid, objid, refobjid from w where refrelkind = 'm'
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = lomowner) AS rolname, lomacl FROM pg_largeobject_metadata
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT classid, objid, refclassid, refobjid, deptype FROM pg_depend WHERE deptype != 'p' AND deptype != 'e' ORDER BY 1,2
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = datdba) AS dba, pg_encoding_to_char(encoding) AS encoding, datcollate, datctype, datfrozenxid, datminmxid, (SELECT spcname FROM pg_tablespace t WHERE t.oid = dattablespace) AS tablespace, shobj_description(oid, 'pg_database') AS description FROM pg_database WHERE datname = 'postgres'
pg_dump: LOG:  statement: SELECT provider, label FROM pg_catalog.pg_shseclabel WHERE classoid = 'pg_database'::pg_catalog.regclass AND objoid = 12029
pg_dump: LOG:  statement: SELECT description, classoid, objoid, objsubid FROM pg_catalog.pg_description ORDER BY classoid, objoid, objsubid
pg_dump: LOG:  statement: SELECT label, provider, classoid, objoid, objsubid FROM pg_catalog.pg_seclabel ORDER BY classoid, objoid, objsubid
pg_dump: LOG:  statement: SET DATESTYLE = ISO
pg_dump: LOG:  statement: SET INTERVALSTYLE = POSTGRES
pg_dump: LOG:  statement: SET extra_float_digits TO 3
pg_dump: LOG:  statement: SET synchronize_seqscans TO off
pg_dump: LOG:  statement: SET statement_timeout = 0
pg_dump: LOG:  statement: SET lock_timeout = 0
pg_dump: LOG:  statement: BEGIN
pg_dump: LOG:  statement: SET TRANSACTION ISOLATION LEVEL REPEATABLE READ, READ ONLY
pg_dump: LOG:  statement: SELECT pg_catalog.pg_is_in_recovery()
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, nspname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = nspowner) AS rolname, nspacl FROM pg_namespace
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT c.tableoid, c.oid, c.relname, c.relacl, c.relkind, c.relnamespace, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = c.relowner) AS rolname, c.relchecks, c.relhastriggers, c.relhasindex, c.relhasrules, c.relhasoids, c.relfrozenxid, c.relminmxid, tc.oid AS toid, tc.relfrozenxid AS tfrozenxid, tc.relminmxid AS tminmxid, c.relpersistence, c.relispopulated, c.relpages, CASE WHEN c.reloftype <> 0 THEN c.reloftype::pg_catalog.regtype ELSE NULL END AS reloftype, d.refobjid AS owning_tab, d.refobjsubid AS owning_col, (SELECT spcname FROM pg_tablespace t WHERE t.oid = c.reltablespace) AS reltablespace, array_to_string(c.reloptions, ', ') AS reloptions, array_to_string(array(SELECT 'toast.' || x FROM unnest(tc.reloptions) x), ', ') AS toast_reloptions FROM pg_class c LEFT JOIN pg_depend d ON (c.relkind = 'S' AND d.classid = c.tableoid AND d.objid = c.oid AND d.objsubid = 0 AND d.refclassid = c.tableoid AND d.deptype = 'a') LEFT JOIN pg_class tc ON (c.reltoastrelid = tc.oid) WHERE c.relkind in ('r', 'S', 'v', 'c', 'm', 'f') ORDER BY c.oid
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT x.tableoid, x.oid, x.extname, n.nspname, x.extrelocatable, x.extversion, x.extconfig, x.extcondition FROM pg_extension x JOIN pg_namespace n ON n.oid = x.extnamespace
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, proname, prolang, pronargs, proargtypes, prorettype, proacl, pronamespace, pg_catalog.pg_get_function_identity_arguments(oid) AS proiargs,(SELECT rolname FROM pg_catalog.pg_roles WHERE oid = proowner) AS rolname FROM pg_proc p WHERE NOT proisagg AND (pronamespace != (SELECT oid FROM pg_namespace WHERE nspname = 'pg_catalog')
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 4.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
    ') AS fdwoptions FROM pg_foreign_data_wrapper
pg_dump: LOG:  statement: SET search_path = pg_catalog
pg_dump: LOG:  statement: SELECT tableoid, oid, srvname, (SELECT rolname FROM pg_catalog.pg_roles WHERE oid = srvowner) AS rolname, srvfdw, srvtype, srvversion, srvacl,array_to_string(ARRAY(SELECT quote_ident(option_name) || ' ' || quote_literal(option_value) FROM pg_options_to_table(srvoptions) ORDER BY option_name), E',
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 1.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 3.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 2.000 ms
pg_dump: LOG:  duration: 0.000 ms
pg_dump: LOG:  duration: 7.000 ms
pg_dump: LOG:  duration: 0.000 ms

